[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"/articles/WIP.html","id":"chromatic","dir":"Articles","previous_headings":"Data","what":"Chromatic","title":"Work In Progress","text":"","code":"cb <- create_chromatic(\"b\") glimpse(cb) #> Rows: 12 #> Columns: 2 #> $ idx_r <dbl> -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 #> $ note  <chr> \"Ab\", \"A\", \"Bb\", \"B\", \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\""},{"path":"/articles/WIP.html","id":"aelian-a","dir":"Articles","previous_headings":"Data","what":"Aelian A","title":"Work In Progress","text":"","code":"aa <- create_aeolian_A() glimpse(aa) #> Rows: 7 #> Columns: 2 #> $ idx_r <dbl> 0, 2, 3, 5, 7, 8, 10 #> $ note  <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\""},{"path":"/articles/WIP.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Work In Progress","text":"","code":"demo <- start_with_some_values(-6:5) |>   add_roles() |>   set_period(12) |>   periodic_slice(0:11) demo <- demo |>   mutate(polar = pi/2 - as.integer(idx)/12 * 2 * pi,          x = cos(polar),          y = sin(polar))  ggplot(data = demo, aes(x = x, y = y)) +   geom_text(data = demo, aes(label = role)) +    geom_point(data = periodic_slice(demo, -1:5), aes(x= .8*x,y=.8*y))+   geom_path(data = periodic_slice(demo, c(-1:5,11)), aes(x= .8*x,y=.8*y))+   geom_path(data = periodic_slice(demo, c(-1:3,11)), aes(x= .75*x,y=.75*y),col=\"red\")+   coord_equal() +   theme_void() demo <- get_roles() |>   mutate(z = as.integer(idx),          polar = pi/2 - (z %% 12)/12 * 2 * pi,          x = cos(polar),          y = sin(polar)) adj <- max(max(abs(demo$z)), 50) ggplot(data = demo, aes(x = x * (adj+z)/adj, y = y * (adj+z)/adj)) +   geom_path(col = \"grey\") +    geom_text(data = demo, aes(label = role)) +    coord_equal() +   theme_void() data <- expand_grid(y = 1:6, x = 0:12) adj <- 0.3 ggplot(data, aes(x = x, y = y)) +   geom_hline(yintercept = 1:6, col = \"grey\") +   geom_vline(xintercept = 0.5, col = \"darkgrey\") +   geom_point(col = \"grey\") +   theme_bw() +   scale_x_continuous(breaks = 0:12, name = NULL) +   scale_y_continuous(breaks = 1:6, labels = c(\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"), name = NULL) +   coord_fixed(ratio = 1/2, ylim = c(1 - adj, 6 + adj)) triad <- function(type){   out <- switch(type,          maj = c(\"M3\", \"P5\"),          min = c(\"m3\", \"P5\"),          aug = c(\"M3\", \"A5\"),          dim = c(\"m3\", \"d5\"),          sus2 = c(\"M2\", \"P5\"),          sus4 = c(\"P4\", \"P5\"),          NA)   c(\"P1\", out) } seven_chord <- function(type){   out <- switch(type,                 maj = c(triad(maj), \"M7\"),                 dom = c(triad(maj), \"m7\"),                 dom_d5 = c(\"P1\", \"M3\", \"d5\", \"m7\"),                 min_maj = c(triad(\"min\"), \"M7\"),                 min = c(triad(\"min\"), \"m7\"),                 aug_maj = c(triad(\"aug\"), \"M7\"),                 aug = c(triad(\"aug\"), \"m7\"),                 dim_maj = c(triad(\"dim\"), \"M7\"),                 half_dim = c(triad(\"dim\"), \"m7\"),                 dim = c(triad(\"dim\"), \"d7\"))   out }"},{"path":"/articles/modes_5.html","id":"pentatonic-as-subsets-of-7-notes-modes","dir":"Articles","previous_headings":"","what":"Pentatonic as subsets of 7-notes modes","title":"modes_5","text":"delta just shift circle fifths. insightful reasoning understand subset mean: major pentatonic (P1-P5)-M2-M6-M3; matches 3 modes M3 major blues (P4-P1-P5)-M2-M6 suspended m7-(P4-P1-P5)-M2 minor pentatonic m3-m7-(P4-P1-P5): matches 3 minor modes P5 minor blues m6-m3-m7-(P4-P1): matches 3 modes m6 ’s matter presentation:","code":"demo <- match_modes() demo #> # A tibble: 15 × 6 #>    delta idx_7 degree_5 name_5      degree_7 name_7     #>    <int> <int>    <dbl> <chr>          <dbl> <chr>      #>  1    -1    -1        1 major              4 lydian     #>  2     0     0        1 major              1 ionian     #>  3     1     1        1 major              5 myxolydian #>  4    -1     0        5 major blues        1 ionian     #>  5     0     1        5 major blues        5 myxolydian #>  6     1     2        5 major blues        2 dorian     #>  7    -1     1        2 suspended          5 myxolydian #>  8     0     2        2 suspended          2 dorian     #>  9     1     3        2 suspended          6 aeolian    #> 10    -1     2        6 minor              2 dorian     #> 11     0     3        6 minor              6 aeolian    #> 12     1     4        6 minor              3 phrygian   #> 13    -1     3        3 minor blues        6 aeolian    #> 14     0     4        3 minor blues        3 phrygian   #> 15     1     5        3 minor blues        7 locrian demo |>   select(delta, name_5, degree_7, name_7) |>   pivot_wider(names_from = delta, values_from = name_5) #> # A tibble: 7 × 5 #>   degree_7 name_7     `-1`        `0`         `1`         #>      <dbl> <chr>      <chr>       <chr>       <chr>       #> 1        4 lydian     major       NA          NA          #> 2        1 ionian     major blues major       NA          #> 3        5 myxolydian suspended   major blues major       #> 4        2 dorian     minor       suspended   major blues #> 5        6 aeolian    minor blues minor       suspended   #> 6        3 phrygian   NA          minor blues minor       #> 7        7 locrian    NA          NA          minor blues demo |>   select(delta, name_5, name_7) |>   pivot_wider(names_from = delta, values_from = name_7) #> # A tibble: 5 × 4 #>   name_5      `-1`       `0`        `1`        #>   <chr>       <chr>      <chr>      <chr>      #> 1 major       lydian     ionian     myxolydian #> 2 major blues ionian     myxolydian dorian     #> 3 suspended   myxolydian dorian     aeolian    #> 4 minor       dorian     aeolian    phrygian   #> 5 minor blues aeolian    phrygian   locrian"},{"path":[]},{"path":"/articles/modes_5.html","id":"guitar-tuning","dir":"Articles","previous_headings":"Particular pentonic","what":"Guitar tuning","title":"modes_5","text":"E--D-G-D-E G-D--E-B: G major D blues major sus E minor B blues minor","code":""},{"path":"/articles/modes_5.html","id":"black-keys-piano","dir":"Articles","previous_headings":"Particular pentonic","what":"Black keys (piano)","title":"modes_5","text":"F#/Gb major pentatonic.","code":""},{"path":"/articles/modes_7.html","id":"explore-all-7-modes-at-once","dir":"Articles","previous_headings":"","what":"Explore all 7 modes at once","title":"modes_7","text":"Add roles mode: Pivot wider roles: order modes builiding order: show simply aligns appropriate coordinates:","code":"demo <- show_mode(mode_size = 7) |>   dplyr::rowwise() |>   dplyr::mutate(data = start_with_mode(mode_size = 7, degree = degree) |>                    add_roles() |>                   as_12_TET() |>                   list()) out <- demo |>   tidyr::unnest(data) |>   dplyr::mutate(idx = as.integer(idx)) |>   tidyr::pivot_wider(names_from = idx, values_from = role) |>   dplyr::select(\"degree\", \"name\", as.character(0:11))  out #> # A tibble: 7 × 14 #>   degree name  `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`   `10`  #>    <dbl> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1      1 ioni… P1    NA    M2    NA    M3    P4    NA    P5    NA    M6    NA    #> 2      2 dori… P1    NA    M2    m3    NA    P4    NA    P5    NA    M6    m7    #> 3      3 phry… P1    m2    NA    m3    NA    P4    NA    P5    m6    NA    m7    #> 4      4 lydi… P1    NA    M2    NA    M3    NA    A4    P5    NA    M6    NA    #> 5      5 myxo… P1    NA    M2    NA    M3    P4    NA    P5    NA    M6    m7    #> 6      6 aeol… P1    NA    M2    m3    NA    P4    NA    P5    m6    NA    m7    #> 7      7 locr… P1    m2    NA    m3    NA    P4    d5    NA    m6    NA    m7    #> # … with 1 more variable: `11` <chr> tibble(degree = c(4, 1, 5, 2, 6, 3, 7)) |>   left_join(out, by = \"degree\") #> # A tibble: 7 × 14 #>   degree name  `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`   `10`  #>    <dbl> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1      4 lydi… P1    NA    M2    NA    M3    NA    A4    P5    NA    M6    NA    #> 2      1 ioni… P1    NA    M2    NA    M3    P4    NA    P5    NA    M6    NA    #> 3      5 myxo… P1    NA    M2    NA    M3    P4    NA    P5    NA    M6    m7    #> 4      2 dori… P1    NA    M2    m3    NA    P4    NA    P5    NA    M6    m7    #> 5      6 aeol… P1    NA    M2    m3    NA    P4    NA    P5    m6    NA    m7    #> 6      3 phry… P1    m2    NA    m3    NA    P4    NA    P5    m6    NA    m7    #> 7      7 locr… P1    m2    NA    m3    NA    P4    d5    NA    m6    NA    m7    #> # … with 1 more variable: `11` <chr> demo2 <- get_mode(mode_size = 7) |>   dplyr::rename(rank = idx) |>   dplyr::rowwise() |>   dplyr::mutate(data = start_with_mode(mode_size = 7, degree = degree) |>                    add_roles() |>                   list()) out <- demo2 |>   tidyr::unnest(data) |>   dplyr::mutate(idx = as.integer(idx)) |>   tidyr::pivot_wider(names_from = idx, values_from = role) |>   dplyr::select(\"degree\", \"name\", paste0(-6:6))  out #> # A tibble: 7 × 15 #>   degree name  `-6`  `-5`  `-4`  `-3`  `-2`  `-1`  `0`   `1`   `2`   `3`   `4`   #>    <dbl> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1      4 lydi… NA    NA    NA    NA    NA    NA    P1    P5    M2    M6    M3    #> 2      1 ioni… NA    NA    NA    NA    NA    P4    P1    P5    M2    M6    M3    #> 3      5 myxo… NA    NA    NA    NA    m7    P4    P1    P5    M2    M6    M3    #> 4      2 dori… NA    NA    NA    m3    m7    P4    P1    P5    M2    M6    NA    #> 5      6 aeol… NA    NA    m6    m3    m7    P4    P1    P5    M2    NA    NA    #> 6      3 phry… NA    m2    m6    m3    m7    P4    P1    P5    NA    NA    NA    #> 7      7 locr… d5    m2    m6    m3    m7    P4    P1    NA    NA    NA    NA    #> # … with 2 more variables: `5` <chr>, `6` <chr>"},{"path":[]},{"path":"/articles/modes_7.html","id":"direct-slicing","dir":"Articles","previous_headings":"Other ways to construct or understand modes","what":"Direct slicing","title":"modes_7","text":"","code":"ionian <- -1 start_with_some_values((0:6) + ionian, period = 31L, unit = 18L) |>   add_roles() #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -1 P4    #> 2        ~ 0 P1    #> 3          1 P5    #> 4          2 M2    #> 5          3 M6    #> 6          4 M3    #> 7          5 M7"},{"path":"/articles/modes_7.html","id":"sequential-building","dir":"Articles","previous_headings":"Other ways to construct or understand modes","what":"Sequential building","title":"modes_7","text":"demonstrate 7-modes can seen cumulative alterations.","code":"# Start on lydian mode (fully augmented) lydian <- start_with_mode(degree = 4) |> add_roles()  # We need to sequentially diminish roles xx <- lydian |>   filter(role != \"P1\") |>    pull(\"role\") |>    rev() |>    accumulate(~c(.x, .y)) xx #> [[1]] #> [1] \"A4\" #>  #> [[2]] #> [1] \"A4\" \"M7\" #>  #> [[3]] #> [1] \"A4\" \"M7\" \"M3\" #>  #> [[4]] #> [1] \"A4\" \"M7\" \"M3\" \"M6\" #>  #> [[5]] #> [1] \"A4\" \"M7\" \"M3\" \"M6\" \"M2\" #>  #> [[6]] #> [1] \"A4\" \"M7\" \"M3\" \"M6\" \"M2\" \"P5\" #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #>  #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #>  #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #>  #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #>  #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #>  #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. res |> filter(degree == 5) |> pull(\"data\") #> [[1]] #> # A tibble: 7 × 2 #>         idx role  #>   <i<1/12>> <chr> #> 1       ~ 0 P1    #> 2         2 M2    #> 3         4 M3    #> 4         5 P4    #> 5         7 P5    #> 6         9 M6    #> 7        10 m7"},{"path":"/articles/modes_7.html","id":"use-transformations-to-get-3rd-5th-and-7th-9th-11th-and-14th","dir":"Articles","previous_headings":"","what":"Use transformations to get 3rd, 5th and 7th, 9th, 11th and 14th","title":"modes_7","text":"can use indexing features create new index period 7, walk steps 2. works scale 7 notes. Let’s 7th degree melodic minor scale: can scripted exhaustive demonstration: Unnest pivot:","code":"# Ionian 1/12 demo <- start_with_mode() |>   add_roles() |>   as_12_TET()  # New index 2/7 demo |>     dplyr::mutate(idx7 = index(dplyr::row_number() - 1, period = 7L, unit = 1L)) |>    xtibble(idx_name = \"idx7\", lock = FALSE) |>   set_unit(to = 2L) |>    dplyr::arrange(idx7)                                                #> # A tibble: 7 × 3 #>         idx role      idx7 #>   <i<1/12>> <chr> <i<2/7>> #> 1       ~ 0 P1         ~ 0 #> 2         4 M3           1 #> 3         7 P5           2 #> 4        11 M7           3 #> 5         2 M2           4 #> 6         5 P4           5 #> 7         9 M6           6 demo <- get_data(\"melodic_minor\") |>   set_lock(to = FALSE) |>   set_zero(on = 7, from = \"degree\") |>   add_roles() |>   as_12_TET() #> ! <m_xtibble> is now unlocked. Stay focused!  demo |>   mutate(idx7 = index(row_number() - 1, period = 7L, unit = 1L)) |>    xtibble(idx_name = \"idx7\", lock = FALSE) |>    set_unit(to = 2L) |>    arrange(idx7)                                                #> # A tibble: 7 × 4 #>         idx degree role      idx7 #>   <i<1/12>>  <int> <chr> <i<2/7>> #> 1       ~ 0      7 P1         ~ 0 #> 2         3      5 m3           1 #> 3         6      2 d5           2 #> 4        10      6 m7           3 #> 5         1      3 m2           4 #> 6         4      1 d4           5 #> 7         8      4 m6           6 funky <- function(x, degree){   x |>     set_zero(on = degree, from = \"degree\") |>     add_roles() |>     as_12_TET() |>     mutate(idx7 = index(row_number() - 1, period = 7L, unit = 1L)) |>      xtibble(idx_name = \"idx7\", lock = FALSE) |>      set_unit(to = 2L) |>     select(\"idx7\", \"role\") |>     arrange(idx7)   } mm <- get_data(\"melodic_minor\") |> set_lock(to = FALSE) #> ! <m_xtibble> is now unlocked. Stay focused!  demo <- mm |>   select(degree) |>   rowwise() |>   mutate(data = funky(x = mm, degree = degree) |> list()) demo |>   unnest(data) |>   mutate(idx7 = as.integer(idx7)) |>   pivot_wider(names_from = idx7, values_from = role) #> # A tibble: 7 × 8 #>   degree `0`   `1`   `2`   `3`   `4`   `5`   `6`   #>    <int> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1      1 P1    M3    A5    M7    M2    A4    M6    #> 2      2 P1    M3    P5    m7    M2    A4    M6    #> 3      3 P1    m3    P5    M7    M2    P4    M6    #> 4      4 P1    M3    P5    m7    M2    P4    m6    #> 5      5 P1    m3    P5    m7    m2    P4    M6    #> 6      6 P1    m3    d5    m7    M2    P4    m6    #> 7      7 P1    m3    d5    m7    m2    d4    m6"},{"path":"/articles/music.html","id":"start-with-some-roles","dir":"Articles","previous_headings":"","what":"Start with some roles","title":"music","text":"","code":"start_with_some_roles(c(\"m3\", \"P5\", \"m7\")) |>   add_notes(root_note = \"D\") |>   as_12_TET() #> # A tibble: 3 × 3 #>         idx role  note  #>   <i<1/12>> <chr> <chr> #> 1         3 m3    F     #> 2         7 P5    A     #> 3        10 m7    C"},{"path":[]},{"path":"/articles/music.html","id":"inversion-of-a-chord","dir":"Articles","previous_headings":"Start with some notes","what":"Inversion of a chord","title":"music","text":"Compare:","code":"start_with_some_notes(c(\"C\", \"F\", \"A\"), root_note = \"D\") |>   add_roles() |>   as_12_TET() |>   set_first(rank = 2) |>   dplyr::mutate(interval = c(0, diff(idx))) #> # A tibble: 3 × 4 #>         idx note  role  interval #>   <i<1/12>> <chr> <chr>    <dbl> #> 1         7 A     P5           0 #> 2        10 C     m7           3 #> 3        15 F     m3           5 start_with_some_notes(c(\"C\", \"F\", \"A\"), root_note = \"D\") |>   add_roles() |>   as_12_TET() |>   set_first(rank = 2) |>   dplyr::rename(\"role_x\" = \"role\") |>   set_lock(to = FALSE) |>   set_zero(\"P5\", from = \"role_x\") |>    set_unit_to_fifths() |>   add_roles() |>   as_12_TET() #> ! <m_xtibble> is now unlocked. Stay focused! #> # A tibble: 3 × 4 #>         idx note  role_x role  #>   <i<1/12>> <chr> <chr>  <chr> #> 1       ~ 0 A     P5     P1    #> 2         3 C     m7     m3    #> 3         8 F     m3     m6"},{"path":"/articles/music.html","id":"advanced","dir":"Articles","previous_headings":"Start with some notes","what":"Advanced","title":"music","text":"F, C successively considered root?","code":"demo <- c(\"F\", \"A\", \"C\") |>   {function(x){     purrr::map_df(x, ~tibble::tibble(       root = .x,       data = start_with_some_notes(x, root_note = .x) |> add_roles() |> list()     ))   }}()  demo |>    tidyr::unnest(data) |>    dplyr::select(-idx) |>   tidyr::pivot_wider(names_from = root, names_prefix = \"root:\", values_from = role) #> # A tibble: 3 × 4 #>   note  `root:F` `root:A` `root:C` #>   <chr> <chr>    <chr>    <chr>    #> 1 F     P1       m6       P4       #> 2 C     P5       m3       P1       #> 3 A     M3       P1       M6"},{"path":"/articles/music.html","id":"start-with-mode","dir":"Articles","previous_headings":"","what":"Start with mode","title":"music","text":"Heptatonic scales: Pentatonic scales: Dorian:","code":"show_mode(mode_size = 7) #> # A tibble: 7 × 2 #>   degree name       #>    <dbl> <chr>      #> 1      1 ionian     #> 2      2 dorian     #> 3      3 phrygian   #> 4      4 lydian     #> 5      5 myxolydian #> 6      6 aeolian    #> 7      7 locrian show_mode(mode_size = 5) #> # A tibble: 5 × 2 #>   degree name        #>    <dbl> <chr>       #> 1      1 major       #> 2      2 suspended   #> 3      3 minor blues #> 4      5 major blues #> 5      6 minor start_with_mode(mode_size = 7, degree = 2) |>   add_roles() |>   as_12_TET() #> # A tibble: 7 × 2 #>         idx role  #>   <i<1/12>> <chr> #> 1       ~ 0 P1    #> 2         2 M2    #> 3         3 m3    #> 4         5 P4    #> 5         7 P5    #> 6         9 M6    #> 7        10 m7"},{"path":[]},{"path":"/articles/music.html","id":"blue-notes","dir":"Articles","previous_headings":"Alter roles","what":"Blue notes:","title":"music","text":"Pentatonic minor d5. show add role: Blue notes major scales: m3 m7… examples : major pentatonic m3: diminished 7th: myxolidian (m7) diminished 7th 3d: dorian (m3, m7) diminished 3d: ascending melodic minor (m3)","code":"start_with_mode(mode_size = 5, degree = 6) |>   add_roles() |>   pull(\"role\") |>   {\\(x) c(x, \"d5\")}() |>   start_with_some_roles() |>   add_notes(root_note = \"C\") |>   as_12_TET() #> # A tibble: 6 × 3 #>         idx role  note  #>   <i<1/12>> <chr> <chr> #> 1       ~ 0 P1    C     #> 2         3 m3    Eb    #> 3         5 P4    F     #> 4         6 d5    Gb    #> 5         7 P5    G     #> 6        10 m7    Bb start_with_mode(mode_size = 5, degree = 1) |>   add_roles() |>   pull(\"role\") |>   {\\(x) c(x, \"m3\")}() |>   start_with_some_roles() |>   add_notes(root_note = \"C\") |>   as_12_TET() #> # A tibble: 6 × 3 #>         idx role  note  #>   <i<1/12>> <chr> <chr> #> 1       ~ 0 P1    C     #> 2         2 M2    D     #> 3         3 m3    Eb    #> 4         4 M3    E     #> 5         7 P5    G     #> 6         9 M6    A start_with_mode(mode_size = 7, degree = 1) |>   add_roles() |>   diminish(\"M7\") |>   add_notes(root_note = \"C\") |>   as_12_TET() #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #> # A tibble: 7 × 3 #>         idx role  note  #>   <i<1/12>> <chr> <chr> #> 1       ~ 0 P1    C     #> 2         2 M2    D     #> 3         4 M3    E     #> 4         5 P4    F     #> 5         7 P5    G     #> 6         9 M6    A     #> 7        10 m7    Bb"},{"path":"/articles/music.html","id":"find-other-minor-scales","dir":"Articles","previous_headings":"Alter roles","what":"Find other minor scales","title":"music","text":"several minor scales. harmonic minor scale natural minor (aeolian) M7 (raised m7): ascending melodic minor : natural minor M7 M6 (harmonic minor M6) dorian M7","code":"start_with_mode(degree = 6) |>   add_roles() |>   augment(\"m7\") #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -4 m6    #> 2         -3 m3    #> 3         -1 P4    #> 4        ~ 0 P1    #> 5          1 P5    #> 6          2 M2    #> 7          5 M7 start_with_mode(degree = 6) |>   add_roles() |>   augment(c(\"m7\", \"m6\")) |>   print() #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -3 m3    #> 2         -1 P4    #> 3        ~ 0 P1    #> 4          1 P5    #> 5          2 M2    #> 6          3 M6    #> 7          5 M7  start_with_mode(degree = 2) |>   add_roles() |>   augment(\"m7\") #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -3 m3    #> 2         -1 P4    #> 3        ~ 0 P1    #> 4          1 P5    #> 5          2 M2    #> 6          3 M6    #> 7          5 M7"},{"path":"/articles/str_fun.html","id":"with-string-manipulation","dir":"Articles","previous_headings":"","what":"With string manipulation","title":"str_fun","text":"Major penta diatonic minus 4th 7th: Remove 3rd 7th, duplicate pick 5 notes starting F: idea: … dealing # b harder… idea use trick, example lowercase bemols: _ missing: 12 CdDeEFgGaAbB Cm triad:C---e----G---- C Maj: C-D-EF-G--B D dorian: D-EF-G--BC- Circle fifths: CGDEABgdeabF C Maj: CGDEAB-----F Penta C Maj: CGDEA------ Penta G Blues Maj: GDEA------C","code":"c(\"CDEFGAB\") %>% str_replace_all(\"[FB]\",\"\") #> [1] \"CDEGA\" c(\"CDEFGAB\") %>%    str_replace_all(\"[EB]\",\"\") %>%   str_dup(2) %>%   str_extract(\"F.{4}\")  #> [1] \"FGACD\" c(\"CDEFGAB\") %>%    str_replace_all(\"[CF]\",\"\") %>%   str_dup(2) %>%   str_extract(\"G.{4}\") #> [1] \"GABDE\" x <-  letters[1:7] %>% str_flatten() str_replace(x,\"(.{5})(.*)\",\"\\\\2\\\\1\") #> [1] \"fgabcde\" str_replace(x,\"(.{2})(.*)\",\"\\\\2\\\\1\") #> [1] \"cdefgab\" str_replace(\"CDEFGAB\",\"(.)(.)(.)(.)(.)(.)(.)\", \"\\\\1\\\\5\\\\2\") #> [1] \"CGD\" str_replace(   \"CC#DD#EFF#GG#AA#B\",   str_dup(\"(.[#b]?)\",12), \"\\\\1\\\\8\\\\3\") #> [1] \"CGD\" wild <- str_c(\"\\\\\",((0:11)*7)%%12+1) %>% str_flatten() wild #> [1] \"\\\\1\\\\8\\\\3\\\\10\\\\5\\\\12\\\\7\\\\2\\\\9\\\\4\\\\11\\\\6\" str_replace(   \"CC#DD#EFF#GG#AA#B\",   str_dup(\"(.[#b]?)\",12), wild) #> [1] \"CGDAEBF#C#G#D#A#F\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Carpentier. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carpentier M (2022). music: Explore Music Theory Opinionated Functions. R package version 0.0.0.9000.","code":"@Manual{,   title = {music: Explore Music Theory With Opinionated Functions},   author = {Marc Carpentier},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"music","dir":"","previous_headings":"","what":"Explore Music Theory With Opinionated Functions","title":"Explore Music Theory With Opinionated Functions","text":"goal music two sides: explore music theory opinionated declarative functions; explore R programming demonstrate development skills. See Extra section detailed description.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explore Music Theory With Opinionated Functions","text":"can install development version music like :","code":"#install.packages(\"pak\") pak::pkg_install(\"c-marc/music\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Explore Music Theory With Opinionated Functions","text":"Start notes C, F , assume root note D. Add role note play. Transform index now relates half-tones. Show first inversion chord (starting second note). Compute intervals. (D)-7/: rootless D minor 7 played …","code":"library(music) #>  #> Attaching package: 'music' #> The following object is masked from 'package:utils': #>  #>     example  start_with_some_notes(c(\"C\", \"F\", \"A\"), root_note = \"D\") |>   add_roles() |>   set_unit_to_1() |>   set_first(rank = 2) |>   dplyr::mutate(intervals = c(0, diff(idx))) #> # A tibble: 3 × 4 #>            idx note  role  intervals #>   <i<(0)1/12>> <chr> <chr>     <dbl> #> 1           -5 A     P5            0 #> 2           -2 C     m7            3 #> 3            3 F     m3            5"},{"path":[]},{"path":"/index.html","id":"music-theory","dir":"","previous_headings":"Extra","what":"Music theory","title":"Explore Music Theory With Opinionated Functions","text":"interesting subject play following reasons: involves meaningful subject play , one can actually learn things playing data functions. Yet specific knowledge required , implementation simple enough used abstract way. scope package, involves two supplementary interesting features exploration learning /teaching programming skills: relies simple blocks. blocks quite small (generally 12 rows 1-3 columns). block can used combined others. involves strong logic. means ’s lot experiment , transforming joining blocks. rebuilding just using others.","code":""},{"path":[]},{"path":"/index.html","id":"general-goals","dir":"","previous_headings":"Extra > Programming","what":"General goals","title":"Explore Music Theory With Opinionated Functions","text":"package following general goals: provide framework declarative pure functions can used intuitively basic tidyverse skills strong checking users inputs, informative messaging; decent documentation; nice organised coding.","code":""},{"path":"/index.html","id":"programming-topics-or-skills","dir":"","previous_headings":"Extra > Programming","what":"Programming topics or skills","title":"Explore Music Theory With Opinionated Functions","text":"implements: OOP S3 framework, subclasses vctrs tibbles; pretty interactions cli; features requiring programming tidy-selection, data-masking, glue injections; recursive functions; dangerous arithmetic (especially non interactive use); unit testing, safe programming quite strict types, objects arguments checking…","code":""},{"path":"/index.html","id":"design-choices","dir":"","previous_headings":"Extra > Programming","what":"Design choices","title":"Explore Music Theory With Opinionated Functions","text":"Main design choices :","code":""},{"path":"/index.html","id":"for-objects","dir":"","previous_headings":"Extra > Programming > Design choices","what":"For objects:","title":"Explore Music Theory With Opinionated Functions","text":"implement powerful index class can deal periodicity transformed; implement subclass tibble index column;","code":""},{"path":"/index.html","id":"for-functions","dir":"","previous_headings":"Extra > Programming > Design choices","what":"For functions","title":"Explore Music Theory With Opinionated Functions","text":"define 3 levels: Low level functions internal… Mild level functions NAMESPACE: make available operations user. require knowledge called meaningfully. usually must sequenced , joining, arranging… require explicitly unlock data. Higher-order functions work without much thinking user show strong stability time, hiding potential underlying changes. can operate locked data.","code":""},{"path":"/index.html","id":"for-data","dir":"","previous_headings":"Extra > Programming > Design choices","what":"For data","title":"Explore Music Theory With Opinionated Functions","text":"experiment idea data functions. simple just wraps data objects behind proxy function. motivations choice : shielding data behind function brings safety interactive use. Even though functions pure, encourages user call reproducible data (blocks). ’s just assignment away. problems solvable just lines, original blocks need tempered . intermediary assignment sometimes makes solution clearer, piping sequence encouraged start blocks. blurs distinction hard coded data blocks can built fly. Something want take advantage . allows extensions without actually adding data: blocks can proposed arguments limited getting functions; can view block, pre-assembled blocks, modified blocks, etc… fit approach using limited set clear intuitive verbs. functional approach wraps OOP parts (actually promotes top level methods richest objects).","code":""},{"path":"/reference/add_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add notes to an xtibble object — add_notes","title":"Add notes to an xtibble object — add_notes","text":"Add column notes xtibble() object. xtibble() must ordered fifths. root note required (note corresponds zero index).","code":""},{"path":"/reference/add_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add notes to an xtibble object — add_notes","text":"","code":"add_notes(x, root_note)  # S3 method for m_xtibble add_notes(x, root_note = \"C\")"},{"path":"/reference/add_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add notes to an xtibble object — add_notes","text":"x xtibble() index() valid attributes. root_note string, root note (default \"C\").","code":""},{"path":"/reference/add_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add notes to an xtibble object — add_notes","text":"xtibble() object additional (updated) column note.","code":""},{"path":[]},{"path":"/reference/add_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add notes to an xtibble object — add_notes","text":"","code":"start_with_mode(degree = 2) |> add_notes(root_note = \"G\") #> # A tibble: 7 × 2 #>         idx note  #>   <i<7/12>> <chr> #> 1        -3 Bb    #> 2        -2 F     #> 3        -1 C     #> 4       ~ 0 G     #> 5         1 D     #> 6         2 A     #> 7         3 E"},{"path":"/reference/add_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Add roles to an xtibble object — add_roles","title":"Add roles to an xtibble object — add_roles","text":"Add column roles xtibble() object. index must ordered fifths. period","code":""},{"path":"/reference/add_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add roles to an xtibble object — add_roles","text":"","code":"add_roles(x, ...)  # S3 method for m_xtibble add_roles(x, style = \"keep\", ...)"},{"path":"/reference/add_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add roles to an xtibble object — add_roles","text":"x xtibble() index() valid attributes. ... arguments passed methods. style string. style roles label (period < 31): \"keep\" (default): use 31-TET roles. \"collapse_all\": merged roles renamed. \"collapse_simpler\": discarded roles renamed.","code":""},{"path":"/reference/add_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add roles to an xtibble object — add_roles","text":"xtibble() object additional (updated) column role.","code":""},{"path":[]},{"path":"/reference/add_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add roles to an xtibble object — add_roles","text":"","code":"start_with_mode(degree = 7) |> add_roles() #> # A tibble: 7 × 2 #>         idx role  #>   <i<7/12>> <chr> #> 1        -6 d5    #> 2        -5 m2    #> 3        -4 m6    #> 4        -3 m3    #> 5        -2 m7    #> 6        -1 P4    #> 7       ~ 0 P1    start_with_mode(degree = 7) |> add_roles(style = \"collapse_simpler\") #> # A tibble: 7 × 3 #>         idx merge_flag role  #>   <i<7/12>> <lgl>      <chr> #> 1        -6 TRUE       d5~A4 #> 2        -5 FALSE      m2    #> 3        -4 FALSE      m6    #> 4        -3 FALSE      m3    #> 5        -2 FALSE      m7    #> 6        -1 FALSE      P4    #> 7       ~ 0 FALSE      P1"},{"path":"/reference/as_12_TET.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the attributes of an index so that it matches 12-TET — as_12_TET","title":"Set the attributes of an index so that it matches 12-TET — as_12_TET","text":"Set period 12 unit 1.","code":""},{"path":"/reference/as_12_TET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the attributes of an index so that it matches 12-TET — as_12_TET","text":"","code":"as_12_TET(x, ...)  # S3 method for m_index as_12_TET(x, ...)  # S3 method for m_xtibble as_12_TET(x, ...)"},{"path":"/reference/as_12_TET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the attributes of an index so that it matches 12-TET — as_12_TET","text":"x object. ... arguments passed methods.","code":""},{"path":"/reference/as_12_TET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the attributes of an index so that it matches 12-TET — as_12_TET","text":"object modified index.","code":""},{"path":"/reference/as_12_TET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the attributes of an index so that it matches 12-TET — as_12_TET","text":"","code":"index(-1:1, period = 31L, unit = 18L) |> as_12_TET() #> <index<1/12>[3]> #> [1]   5 ~ 0   7 start_with_some_roles(c(\"P1\", \"d5\", \"A6\")) |> as_12_TET() #> # A tibble: 3 × 2 #>         idx role  #>   <i<1/12>> <chr> #> 1       ~ 0 P1    #> 2         6 d5    #> 3        10 A6"},{"path":"/reference/break_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Break the index at a chosen value — break_point","title":"Break the index at a chosen value — break_point","text":"Choose breaking point circular index (range values exceed period). Force numeration chosen pattern, specifying maximum positive value (next negative).","code":""},{"path":"/reference/break_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break the index at a chosen value — break_point","text":"","code":"break_point(x, ...)  # S3 method for m_index break_point(x, at, ...)  # S3 method for m_xtibble break_point(x, at, ...)"},{"path":"/reference/break_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break the index at a chosen value — break_point","text":"x object ... arguments passed methods. integer. breaking point.","code":""},{"path":"/reference/break_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break the index at a chosen value — break_point","text":"","code":"index(0:11, period = 12) |> break_point(at = 5L) #> <index<1/12>[12]> #>  [1] ~ 0    1    2    3    4    5    -6   -5   -4   -3   -2   -1 example(\"xtibble\") |> break_point(at = 1L) #> # A tibble: 4 × 2 #>        idx name  #>   <i<1/4>> <chr> #> 1      ~ 0 x0    #> 2        1 x1    #> 3       -2 x2    #> 4       -1 x3"},{"path":"/reference/collapse_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse roles into a lower period — collapse_roles","title":"Collapse roles into a lower period — collapse_roles","text":"Construct new labels 19 12-EDO. Two style proposed: \"\": relabel merge. \"simpler\": relabel subtle roles emphasize merge, keep merge implicit elsewhere.","code":""},{"path":"/reference/collapse_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse roles into a lower period — collapse_roles","text":"","code":"collapse_roles(period = 12, style = c(\"all\", \"simpler\"))"},{"path":"/reference/collapse_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse roles into a lower period — collapse_roles","text":"period integer, new EDO system. 19 12. style string, either \"full\" \"simpler\"","code":""},{"path":"/reference/collapse_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse roles into a lower period — collapse_roles","text":"xtibble() object new period new labels roles.","code":""},{"path":"/reference/collapse_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse roles into a lower period — collapse_roles","text":"","code":"collapse_roles(period = 12, style = \"all\") #> # A tibble: 13 × 3 #>          idx merge_flag role     #>    <i<7/12>> <lgl>      <chr>    #>  1        -6 TRUE       d5~A4    #>  2        -5 TRUE       m2~A1    #>  3        -4 TRUE       m6~A5    #>  4        -3 TRUE       m3~A2    #>  5        -2 TRUE       m7~A6    #>  6        -1 TRUE       P4~A3    #>  7       ~ 0 TRUE       d2~P1~A7 #>  8         1 TRUE       d6~P5    #>  9         2 TRUE       d3~M2    #> 10         3 TRUE       d7~M6    #> 11         4 TRUE       d4~M3    #> 12         5 TRUE       d8~M7    #> 13         6 TRUE       d5~A4    collapse_roles(period = 12, style = \"simpler\") #> # A tibble: 13 × 3 #>          idx merge_flag role  #>    <i<7/12>> <lgl>      <chr> #>  1        -6 TRUE       d5~A4 #>  2        -5 FALSE      m2    #>  3        -4 FALSE      m6    #>  4        -3 FALSE      m3    #>  5        -2 FALSE      m7    #>  6        -1 FALSE      P4    #>  7       ~ 0 FALSE      P1    #>  8         1 FALSE      P5    #>  9         2 FALSE      M2    #> 10         3 FALSE      M6    #> 11         4 FALSE      M3    #> 12         5 FALSE      M7    #> 13         6 TRUE       d5~A4"},{"path":"/reference/create_aeolian_A.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the aeolian A scale — create_aeolian_A","title":"Create the aeolian A scale — create_aeolian_A","text":"Create aeolian scale. builds regular tibble::tibble(). purposefully makes use anything package.","code":""},{"path":"/reference/create_aeolian_A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the aeolian A scale — create_aeolian_A","text":"","code":"create_aeolian_A()"},{"path":"/reference/create_aeolian_A.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the aeolian A scale — create_aeolian_A","text":"tibble::tibble() 7x2 columns idx_r (regular half-tones scale) note.","code":""},{"path":[]},{"path":"/reference/create_chromatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create chromatic scales — create_chromatic","title":"Create chromatic scales — create_chromatic","text":"Create chromatic scale, either sharps bemols. builds create_aeolian_A(), chromatic scale starts \"\".","code":""},{"path":"/reference/create_chromatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create chromatic scales — create_chromatic","text":"","code":"create_chromatic(flavor = \"b\")"},{"path":"/reference/create_chromatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create chromatic scales — create_chromatic","text":"flavor string. Either \"b\" (default) \"#\"/\"s\". Whether label five supplementary notes sharps bemols.","code":""},{"path":"/reference/create_chromatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create chromatic scales — create_chromatic","text":"tibble::tibble() 12 x 2 columns ìdx_r (regular half-tones scale) note.","code":""},{"path":[]},{"path":"/reference/create_chromatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create chromatic scales — create_chromatic","text":"","code":"create_chromatic(flavor = \"#\") #> # A tibble: 12 × 2 #>    idx_r note  #>    <dbl> <chr> #>  1     0 A     #>  2     1 A#    #>  3     2 B     #>  4     3 C     #>  5     4 C#    #>  6     5 D     #>  7     6 D#    #>  8     7 E     #>  9     8 F     #> 10     9 F#    #> 11    10 G     #> 12    11 G#"},{"path":"/reference/create_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 31 notes — create_notes","title":"Create 31 notes — create_notes","text":"Create 31 notes (31-EDO) \"bb\", \"b\", none, \"#\" \"x\" suffix. \"x\" meant doubled sharp. \"Fbb\", \"Cbb\", \"Ex\", \"Bx\" excluded. secondary column allowed_root limit range allowed root note \"Gb\" \"#\". allows construct -9:9 available notes (19-EDO) root note.","code":""},{"path":"/reference/create_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 31 notes — create_notes","text":"","code":"create_notes()"},{"path":"/reference/create_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 31 notes — create_notes","text":"xtibble() object : idx (period 31, unit 18), note, n_suffix, number bemols (negative count) sharps (positive).","code":""},{"path":"/reference/create_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 31 notes — create_notes","text":"","code":"music:::create_notes() #> # A tibble: 31 × 4 #>    n_suffix note         idx allowed_root #>       <int> <chr> <i<18/31>> <chr>        #>  1       -2 Gbb            1 NA           #>  2       -2 Dbb            2 NA           #>  3       -2 Abb            3 NA           #>  4       -2 Ebb            4 NA           #>  5       -2 Bbb            5 NA           #>  6       -1 Fb             6 NA           #>  7       -1 Cb             7 NA           #>  8       -1 Gb             8 Gb           #>  9       -1 Db             9 Db           #> 10       -1 Ab            10 Ab           #> # … with 21 more rows"},{"path":"/reference/example.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct tiny examples of objects of class m_index or m_xtibble — example","title":"Construct tiny examples of objects of class m_index or m_xtibble — example","text":"Construct tiny examples index() xtibble() objects. concise clearer examples documented function. user get familiar fonctions.","code":""},{"path":"/reference/example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct tiny examples of objects of class m_index or m_xtibble — example","text":"","code":"example(class = NULL, period = 4L, unit = 1L, lock = FALSE)"},{"path":"/reference/example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct tiny examples of objects of class m_index or m_xtibble — example","text":"class string. Either \"index\" \"xtibble\". period integer. Default 4L. unit integer. Default 1L. lock logical. Default FALSE.","code":""},{"path":"/reference/example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct tiny examples of objects of class m_index or m_xtibble — example","text":"object required class","code":""},{"path":"/reference/example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct tiny examples of objects of class m_index or m_xtibble — example","text":"","code":"example(\"index\") #> <index<1/4>[4]> #> [1] ~ 0   1   2   3 example(\"xtibble\", period = 7L) #> # A tibble: 7 × 2 #>        idx name  #>   <i<1/7>> <chr> #> 1      ~ 0 x0    #> 2        1 x1    #> 3        2 x2    #> 4        3 x3    #> 5        4 x4    #> 6        5 x5    #> 7        6 x6"},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get internally stored data — get_data","title":"Get internally stored data — get_data","text":"Proxy function access preotected data package.","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get internally stored data — get_data","text":"","code":"get_data(name = NULL)"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get internally stored data — get_data","text":"name, string, name table. NULL (default), get_data() lists available names.","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get internally stored data — get_data","text":"name NULL invalid, names available data. required data.","code":""},{"path":"/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get internally stored data — get_data","text":"","code":"get_data() #> [1] \"roles\"          \"modes_7\"        \"modes_5\"        \"melodic_minor\"  #> [5] \"harmonic_minor\" get_data(get_data()[1]) #> # A tibble: 32 × 6 #>    r_12edo r_19edo r_31edo name_abbr name_full                idx #>      <dbl>   <dbl>   <dbl> <chr>     <chr>              <i<1/31>> #>  1       0       0       0 P1        unisson                  ~ 0 #>  2       0       1       1 d2        dim 2nd                    1 #>  3       1       1       2 A1        chromatic semitone         2 #>  4       1       2       3 m2        min 2nd                    3 #>  5      NA      NA       4 NA        NA                         4 #>  6       2       3       5 M2        whole thone                5 #>  7       2       4       6 d3        dim 3rd                    6 #>  8       3       4       7 A2        aug 2nd                    7 #>  9       3       5       8 m3        min 3rd                    8 #> 10      NA      NA       9 NA        NA                         9 #> # … with 22 more rows"},{"path":"/reference/get_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get modes of seven or five notes — get_mode","title":"Get modes of seven or five notes — get_mode","text":"Get heptatonic pentatonic modes.","code":""},{"path":"/reference/get_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get modes of seven or five notes — get_mode","text":"","code":"get_mode(mode_size = 7)"},{"path":"/reference/get_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get modes of seven or five notes — get_mode","text":"mode_size integer. family modes. Either 7 5.","code":""},{"path":"/reference/get_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get modes of seven or five notes — get_mode","text":"xtibble() object 3 columns idx, degree name.","code":""},{"path":[]},{"path":"/reference/get_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get modes of seven or five notes — get_mode","text":"","code":"# All 7-notes modes and initiate index on dorian get_mode(mode_size = 7) #> # A tibble: 7 × 3 #>         idx degree name       #>   <i<7/12>>  <dbl> <chr>      #> 1        -1      4 lydian     #> 2       ~ 0      1 ionian     #> 3         1      5 myxolydian #> 4         2      2 dorian     #> 5         3      6 aeolian    #> 6         4      3 phrygian   #> 7         5      7 locrian"},{"path":"/reference/get_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get notes with zero of the index set to a root note — get_notes","title":"Get notes with zero of the index set to a root note — get_notes","text":"Get 31 notes ordered fifths, zero index set specified root note. Available root note note \"Gb\" \"#\".","code":""},{"path":"/reference/get_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get notes with zero of the index set to a root note — get_notes","text":"","code":"get_notes(root_note = \"C\")"},{"path":"/reference/get_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get notes with zero of the index set to a root note — get_notes","text":"root_note string, root note.","code":""},{"path":"/reference/get_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get notes with zero of the index set to a root note — get_notes","text":"xtibble() object 31 x 2 idx note.","code":""},{"path":"/reference/get_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get notes with zero of the index set to a root note — get_notes","text":"","code":"get_notes(root_note = \"G\") #> # A tibble: 31 × 2 #>           idx note  #>    <i<18/31>> <chr> #>  1        -14 Gbb   #>  2        -13 Dbb   #>  3        -12 Abb   #>  4        -11 Ebb   #>  5        -10 Bbb   #>  6         -9 Fb    #>  7         -8 Cb    #>  8         -7 Gb    #>  9         -6 Db    #> 10         -5 Ab    #> # … with 21 more rows"},{"path":"/reference/get_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get roles — get_roles","title":"Get roles — get_roles","text":"Get roles internal data transform : index() period = 31, unit = 18 (fifths); centered P1.","code":""},{"path":"/reference/get_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get roles — get_roles","text":"","code":"get_roles()"},{"path":"/reference/get_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get roles — get_roles","text":"xtibble() 25 roles.","code":""},{"path":"/reference/get_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get roles — get_roles","text":"","code":"get_roles() #> # A tibble: 25 × 2 #>           idx role  #>    <i<18/31>> <chr> #>  1        -12 d2    #>  2        -11 d6    #>  3        -10 d3    #>  4         -9 d7    #>  5         -8 d4    #>  6         -7 d8    #>  7         -6 d5    #>  8         -5 m2    #>  9         -4 m6    #> 10         -3 m3    #> # … with 15 more rows"},{"path":"/reference/index-topic.html","id":null,"dir":"Reference","previous_headings":"","what":"index vector — index","title":"index vector — index","text":"Create integer vector represents index boosted features.","code":""},{"path":"/reference/index-topic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"index vector — index","text":"","code":"index(x = integer(), period = 1L, unit = 1L)  is_index(x)"},{"path":"/reference/index-topic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"index vector — index","text":"x integer vector index(): integer vector is_index(): object test. period integer scalar. period index. unit integer scalar. unit index.","code":""},{"path":"/reference/index-topic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"index vector — index","text":"S3 vector class m_index.","code":""},{"path":"/reference/index-topic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"index vector — index","text":"periodic. context package, typically period 31, 19 12 (12-TET). can also period 7 5 want use methods 7-notes 5-notes sets. transformable unit. means index can represent steps 1 amount steps. can walk 2 (e.g 0 0/12, 1 2/12, ...), 3, 4 .... fifths mostly used feature.","code":""},{"path":"/reference/index-topic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"index vector — index","text":"","code":"index(0:11, period = 12, unit = 7) #> <index<7/12>[12]> #>  [1] ~ 0    1    2    3    4    5    6    7    8    9    10   11"},{"path":"/reference/is_locked.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the m_xtibble is locked — is_locked","title":"Test if the m_xtibble is locked — is_locked","text":"Test m_xtibble locked","code":""},{"path":"/reference/is_locked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the m_xtibble is locked — is_locked","text":"","code":"is_locked(x)"},{"path":"/reference/is_locked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the m_xtibble is locked — is_locked","text":"x oject class m_xtibble.","code":""},{"path":"/reference/is_locked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the m_xtibble is locked — is_locked","text":"logical","code":""},{"path":"/reference/m-rlang.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal rlang — m-rlang","title":"Internal rlang — m-rlang","text":"Internal rlang","code":""},{"path":"/reference/m-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — m-vctrs","title":"Internal vctrs methods — m-vctrs","text":"Internal vctrs methods","code":""},{"path":"/reference/m-zeallot.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal zeallot — m-zeallot","title":"Internal zeallot — m-zeallot","text":"Internal zeallot","code":""},{"path":"/reference/match_modes.html","id":null,"dir":"Reference","previous_headings":"","what":"Match 5 and 7 modes — match_modes","title":"Match 5 and 7 modes — match_modes","text":"Provide matching table 7 5 modes.","code":""},{"path":"/reference/match_modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match 5 and 7 modes — match_modes","text":"","code":"match_modes()"},{"path":"/reference/match_modes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match 5 and 7 modes — match_modes","text":"","code":"match_modes() #> # A tibble: 15 × 6 #>    delta idx_7 degree_5 name_5      degree_7 name_7     #>    <int> <int>    <dbl> <chr>          <dbl> <chr>      #>  1    -1    -1        1 major              4 lydian     #>  2     0     0        1 major              1 ionian     #>  3     1     1        1 major              5 myxolydian #>  4    -1     0        5 major blues        1 ionian     #>  5     0     1        5 major blues        5 myxolydian #>  6     1     2        5 major blues        2 dorian     #>  7    -1     1        2 suspended          5 myxolydian #>  8     0     2        2 suspended          2 dorian     #>  9     1     3        2 suspended          6 aeolian    #> 10    -1     2        6 minor              2 dorian     #> 11     0     3        6 minor              6 aeolian    #> 12     1     4        6 minor              3 phrygian   #> 13    -1     3        3 minor blues        6 aeolian    #> 14     0     4        3 minor blues        3 phrygian   #> 15     1     5        3 minor blues        7 locrian"},{"path":"/reference/periodic_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice an xtibble using index positions — periodic_slice","title":"Slice an xtibble using index positions — periodic_slice","text":"Slice xtibble() object, list indices. Importantly: uses period attribute match indices based moduloresults. uses inner join: allows pseudo-duplication (example select -6:6 index period 12); silently ignore missing indices (contrary left join) allows re-ordering operation specifying arbitrary covering range (see example).","code":""},{"path":"/reference/periodic_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice an xtibble using index positions — periodic_slice","text":"","code":"periodic_slice(x, ...)  # S3 method for m_xtibble periodic_slice(x, idx, ...)"},{"path":"/reference/periodic_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice an xtibble using index positions — periodic_slice","text":"x xtibble() object. ... arguments passed methods. idx vector integer.","code":""},{"path":"/reference/periodic_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice an xtibble using index positions — periodic_slice","text":"xtibble() object.","code":""},{"path":"/reference/periodic_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice an xtibble using index positions — periodic_slice","text":"","code":"tbl <- tibble::tibble(idx = index(0:6, 7L, 1L), name = LETTERS[1:7]) xtibble(tbl, idx_name = \"idx\") |> periodic_slice(-9:9) #> # A tibble: 19 × 2 #>         idx name  #>    <i<1/7>> <chr> #>  1       -9 F     #>  2       -8 G     #>  3     ~ -7 A     #>  4       -6 B     #>  5       -5 C     #>  6       -4 D     #>  7       -3 E     #>  8       -2 F     #>  9       -1 G     #> 10      ~ 0 A     #> 11        1 B     #> 12        2 C     #> 13        3 D     #> 14        4 E     #> 15        5 F     #> 16        6 G     #> 17      ~ 7 A     #> 18        8 B     #> 19        9 C      # Re-ordering with a covering range start_with_mode() |> add_roles() |> periodic_slice(0:11) #> # A tibble: 7 × 2 #>         idx role  #>   <i<7/12>> <chr> #> 1       ~ 0 P1    #> 2         1 P5    #> 3         2 M2    #> 4         3 M6    #> 5         4 M3    #> 6         5 M7    #> 7        11 P4"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/set_first.html","id":null,"dir":"Reference","previous_headings":"","what":"Set first of the set — set_first","title":"Set first of the set — set_first","text":"Transform index i_th row (index positive) become first one (negative lowest value ). takes advantage periodic feature index. pragmatically, computes: inversion chord (first inversion rank = 2 ...); mode scale.","code":""},{"path":"/reference/set_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set first of the set — set_first","text":"","code":"set_first(x, rank)  # S3 method for m_xtibble set_first(x, rank = 1L)"},{"path":"/reference/set_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set first of the set — set_first","text":"x xtibble() index() set unit 1. rank integer. rank set first (set lowest index value).","code":""},{"path":"/reference/set_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set first of the set — set_first","text":"object modified index re-arranged accordingly.","code":""},{"path":"/reference/set_first.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set first of the set — set_first","text":"","code":"c(\"F\", \"C\", \"G\") |> start_with_some_notes() |> as_12_TET() |> set_first(rank = 2L) #> # A tibble: 3 × 2 #>         idx note  #>   <i<1/12>> <chr> #> 1         5 F     #> 2         7 G     #> 3      ~ 12 C     start_with_mode() |> add_notes() |> set_unit_to_1() |> set_first(rank = 2L) #> # A tibble: 7 × 2 #>         idx note  #>   <i<1/12>> <chr> #> 1         2 D     #> 2         4 E     #> 3         5 F     #> 4         7 G     #> 5         9 A     #> 6        11 B     #> 7      ~ 12 C"},{"path":"/reference/set_lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock or unlock an object of class m_xtibble — set_lock","title":"Lock or unlock an object of class m_xtibble — set_lock","text":"Lock unlock object class m_xtibble","code":""},{"path":"/reference/set_lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock or unlock an object of class m_xtibble — set_lock","text":"","code":"set_lock(x, to, silently = FALSE)"},{"path":"/reference/set_lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock or unlock an object of class m_xtibble — set_lock","text":"x object class m_xtibble. logical set lock (TRUE locked). silently logical use fonction silently non interactive context.","code":""},{"path":"/reference/set_lock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock or unlock an object of class m_xtibble — set_lock","text":"Modified x.","code":""},{"path":"/reference/set_lock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lock or unlock an object of class m_xtibble — set_lock","text":"","code":"example(\"xtibble\") |> set_lock(to = TRUE) |> set_lock(to = FALSE) #> ℹ <m_xtibble> is now locked. #> ! <m_xtibble> is now unlocked. Stay focused! #> # A tibble: 4 × 2 #>        idx name  #>   <i<1/4>> <chr> #> 1      ~ 0 x0    #> 2        1 x1    #> 3        2 x2    #> 4        3 x3"},{"path":"/reference/set_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the period to a new value — set_period","title":"Set the period to a new value — set_period","text":"Change period index. index must ordered fifths (specified jointly period unit). new period lower, possibility colliding values. default merged operation abort. case, usually means data (notes /roles) need attention. Merging can asked strip column. columns note /role present, richer values inherited new index. chosen feature allows subtle roles definitions even switching 12-EDO. can overwritten calling add_notes() add_roles() : provide new labels.","code":""},{"path":"/reference/set_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the period to a new value — set_period","text":"","code":"set_period(x, ...)  # S3 method for m_index set_period(x, to, merge = FALSE, ...)  # S3 method for m_xtibble set_period(x, to, merge = FALSE, ...)"},{"path":"/reference/set_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the period to a new value — set_period","text":"x object. ... arguments passed methods. integer. period set index (31, 19 12). merge logical. Default FALSE.","code":""},{"path":"/reference/set_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the period to a new value — set_period","text":"modified object.","code":""},{"path":"/reference/set_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the period to a new value — set_period","text":"","code":"index(0:1, period = 31L, unit = 18L) |> set_period(to = 12L) #> <index<7/12>[2]> #> [1] ~ 0   1 start_with_some_roles(c(\"P1\", \"d7\", \"A5\")) |> set_period(to = 12L) #> # A tibble: 3 × 2 #>         idx role  #>   <i<7/12>> <chr> #> 1        -4 A5    #> 2       ~ 0 P1    #> 3         3 d7    start_with_some_roles(c(\"P1\", \"d7\", \"M6\")) |> set_period(to = 12, merge = TRUE) #> ! Duplicates: -9 and 3 #> # A tibble: 2 × 1 #>         idx #>   <i<7/12>> #> 1         3 #> 2       ~ 0"},{"path":"/reference/set_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the unit of an index to a new value — set_unit","title":"Set the unit of an index to a new value — set_unit","text":"Transform index() new unit.","code":""},{"path":"/reference/set_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the unit of an index to a new value — set_unit","text":"","code":"set_unit(x, ...)  # S3 method for default set_unit(x, period, from, to, ...)  # S3 method for m_index set_unit(x, to, ...)  # S3 method for m_xtibble set_unit(x, to, ...)"},{"path":"/reference/set_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the unit of an index to a new value — set_unit","text":"x vector integer. object. ... arguments passed methods. period integer, period index. integer, unit current index. integer, unit set index .","code":""},{"path":"/reference/set_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the unit of an index to a new value — set_unit","text":"vector integer, new values index. object, new index.","code":""},{"path":"/reference/set_unit_to_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Set unit of an index to one — set_unit_to_1","title":"Set unit of an index to one — set_unit_to_1","text":"Transform index unit equals one. Values projected 0 period-1. wraps set_unit().","code":""},{"path":"/reference/set_unit_to_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set unit of an index to one — set_unit_to_1","text":"","code":"set_unit_to_1(x)  # S3 method for m_index set_unit_to_1(x)  # S3 method for m_xtibble set_unit_to_1(x)"},{"path":"/reference/set_unit_to_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set unit of an index to one — set_unit_to_1","text":"x object.","code":""},{"path":"/reference/set_unit_to_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set unit of an index to one — set_unit_to_1","text":"object modified index.","code":""},{"path":"/reference/set_unit_to_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set unit of an index to one — set_unit_to_1","text":"","code":"index(-1:1, period = 12L, unit = 7L) |> set_unit_to_1() #> <index<1/12>[3]> #> [1]   5 ~ 0   7 start_with_some_notes(c(\"C\",\"E\",\"G\")) |> set_unit_to_1() #> # A tibble: 3 × 2 #>         idx note  #>   <i<1/31>> <chr> #> 1       ~ 0 C     #> 2        10 E     #> 3        18 G"},{"path":"/reference/set_unit_to_fifths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","title":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","text":"Transform index unit equals one corresponds fifth interval. Values projected -period %/% 2 period %/% 2 exception 12-TET values projected -5 6. wraps set_unit().","code":""},{"path":"/reference/set_unit_to_fifths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","text":"","code":"set_unit_to_fifths(x)  # S3 method for m_index set_unit_to_fifths(x)  # S3 method for m_xtibble set_unit_to_fifths(x)"},{"path":"/reference/set_unit_to_fifths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","text":"x object.","code":""},{"path":"/reference/set_unit_to_fifths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","text":"object modified index.","code":""},{"path":"/reference/set_unit_to_fifths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set unit of an index so that it gets ordered by fifths — set_unit_to_fifths","text":"","code":"index(0:11, period = 12L, unit = 1L) |> set_unit_to_fifths() #> <index<7/12>[12]> #>  [1] ~ 0    7    2    9    4    11   6    1    8    3    10   5  start_with_mode() |> as_12_TET() |> set_unit_to_fifths() #> # A tibble: 7 × 1 #>         idx #>   <i<7/12>> #> 1        -1 #> 2       ~ 0 #> 3         1 #> 4         2 #> 5         3 #> 6         4 #> 7         5"},{"path":"/reference/set_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Set zero on a value of the index itself or from an alternative source — set_zero","title":"Set zero on a value of the index itself or from an alternative source — set_zero","text":"Reset zero index specified value. value refers : index NULL (default); value column designated supplied.","code":""},{"path":"/reference/set_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set zero on a value of the index itself or from an alternative source — set_zero","text":"","code":"set_zero(x, ...)  # S3 method for m_index set_zero(x, on, ...)  # S3 method for m_xtibble set_zero(x, on, from = NULL, direction = \"forward\", ...)"},{"path":"/reference/set_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set zero on a value of the index itself or from an alternative source — set_zero","text":"x object. ... arguments passed methods. scalar integer NULL. scalar type . string, column name. direction, string, either \"forward\" (default) \"backward\". supplied, direction used search unique.","code":""},{"path":"/reference/set_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set zero on a value of the index itself or from an alternative source — set_zero","text":"modified x object.","code":""},{"path":"/reference/set_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set zero on a value of the index itself or from an alternative source — set_zero","text":"","code":"example(\"index\") |> set_zero(on = 1L) #> <index<1/4>[4]> #> [1]   -1 ~ 0    1    2  example(\"xtibble\") |> set_zero(on = 2) #> # A tibble: 4 × 2 #>        idx name  #>   <i<1/4>> <chr> #> 1       -2 x0    #> 2       -1 x1    #> 3      ~ 0 x2    #> 4        1 x3    example(\"xtibble\") |> set_zero(on = \"x2\", from = \"name\") #> # A tibble: 4 × 2 #>        idx name  #>   <i<1/4>> <chr> #> 1       -2 x0    #> 2       -1 x1    #> 3      ~ 0 x2    #> 4        1 x3"},{"path":"/reference/shift_role.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment or diminish roles — shift_role","title":"Augment or diminish roles — shift_role","text":"Augment diminish roles. drop column. Index reset richest attributes.","code":""},{"path":"/reference/shift_role.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment or diminish roles — shift_role","text":"","code":"shift_role(x, roles, delta)  augment(x, roles)  # S3 method for m_xtibble augment(x, roles)  diminish(x, roles)  # S3 method for m_xtibble diminish(x, roles)"},{"path":"/reference/shift_role.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment or diminish roles — shift_role","text":"x xtibble() object column 'role'. roles string, scalar vector. roles augment diminish. delta integer. shift. -7L (diminish) 7L (augment).","code":""},{"path":"/reference/shift_role.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment or diminish roles — shift_role","text":"new xtibble() 2 columns: idx modified index attributes set period 31 unit 18, role modified roles.","code":""},{"path":"/reference/shift_role.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment or diminish roles — shift_role","text":"","code":"start_with_mode(degree = 6) |> add_roles() |> augment(\"m3\") #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -4 m6    #> 2         -2 m7    #> 3         -1 P4    #> 4        ~ 0 P1    #> 5          1 P5    #> 6          2 M2    #> 7          4 M3    start_with_mode(degree = 1) |> add_roles() |> diminish(\"M7\") #> Change of attributes #> ! Attributes of the index were augmented to account for possible richer #>   context. #> ℹ period is now 31 and unit 18. #>  #> # A tibble: 7 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -2 m7    #> 2         -1 P4    #> 3        ~ 0 P1    #> 4          1 P5    #> 5          2 M2    #> 6          3 M6    #> 7          4 M3"},{"path":"/reference/show_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mode — show_mode","title":"Show mode — show_mode","text":"Show mode","code":""},{"path":"/reference/show_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mode — show_mode","text":"","code":"show_mode(mode_size = 7L)"},{"path":"/reference/show_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mode — show_mode","text":"mode_size integer, 7 (default) 5, required family modes.","code":""},{"path":[]},{"path":"/reference/show_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mode — show_mode","text":"","code":"show_mode(mode_size = 7L) #> # A tibble: 7 × 2 #>   degree name       #>    <dbl> <chr>      #> 1      1 ionian     #> 2      2 dorian     #> 3      3 phrygian   #> 4      4 lydian     #> 5      5 myxolydian #> 6      6 aeolian    #> 7      7 locrian"},{"path":"/reference/start_with_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Start with a mode — start_with_mode","title":"Start with a mode — start_with_mode","text":"Start one 12 available modes: 7 heptatonic modes; 5 pentatonic modes. Currently degrees pentatonic modes numbered match heptatonic ones. five available degrees therefore 1, 2, 3, 5 6 (1:5).","code":""},{"path":"/reference/start_with_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start with a mode — start_with_mode","text":"","code":"start_with_mode(mode_size = 7L, degree = 1L)"},{"path":"/reference/start_with_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start with a mode — start_with_mode","text":"mode_size integer, 7 (default) 5, required family modes. degree integer, degree family modes.","code":""},{"path":"/reference/start_with_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start with a mode — start_with_mode","text":"xtibble() object column ìdx (period = 12; unit = 7), locked.","code":""},{"path":[]},{"path":"/reference/start_with_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start with a mode — start_with_mode","text":"","code":"start_with_mode(mode_size = 7L, degree = 2L) #> # A tibble: 7 × 1 #>         idx #>   <i<7/12>> #> 1        -3 #> 2        -2 #> 3        -1 #> 4       ~ 0 #> 5         1 #> 6         2 #> 7         3"},{"path":"/reference/start_with_some_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Start with a set of chosen notes — start_with_some_notes","title":"Start with a set of chosen notes — start_with_some_notes","text":"Create object class m_xtibble set notes.","code":""},{"path":"/reference/start_with_some_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start with a set of chosen notes — start_with_some_notes","text":"","code":"start_with_some_notes(notes, root_note = \"C\", idx_name = \"idx\")"},{"path":"/reference/start_with_some_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start with a set of chosen notes — start_with_some_notes","text":"notes vector strings. set notes. Expected format uppercase letter G, optional suffix \"b\", \"#\", \"bb\" \"x\" (e.g. \"C\", \"Eb\", \"F#\"...). root_note string. root note. necessary notes. idx_name string, column name index (default \"idx\").","code":""},{"path":"/reference/start_with_some_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start with a set of chosen notes — start_with_some_notes","text":"object m_xtibble columns idx (period 31, unit 18) notes.","code":""},{"path":[]},{"path":"/reference/start_with_some_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start with a set of chosen notes — start_with_some_notes","text":"","code":"start_with_some_notes(c(\"F\",\"A\",\"Eb\"), root_note = \"Gb\") #> # A tibble: 3 × 2 #>          idx note  #>   <i<18/31>> <chr> #> 1          3 Eb    #> 2          5 F     #> 3          9 A"},{"path":"/reference/start_with_some_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Start with a set of chosen roles — start_with_some_roles","title":"Start with a set of chosen roles — start_with_some_roles","text":"Create xtibble() object roles.","code":""},{"path":"/reference/start_with_some_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start with a set of chosen roles — start_with_some_roles","text":"","code":"start_with_some_roles(roles, idx_name = \"idx\")"},{"path":"/reference/start_with_some_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start with a set of chosen roles — start_with_some_roles","text":"roles vector strings. set roles. idx_name string, column name index (default \"idx\").","code":""},{"path":"/reference/start_with_some_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start with a set of chosen roles — start_with_some_roles","text":"xtibble() columns idx (period 31, unit 18) role.","code":""},{"path":[]},{"path":"/reference/start_with_some_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start with a set of chosen roles — start_with_some_roles","text":"","code":"start_with_some_roles(c(\"M3\", \"m7\")) #> # A tibble: 2 × 2 #>          idx role  #>   <i<18/31>> <chr> #> 1         -2 m7    #> 2          4 M3"},{"path":"/reference/start_with_some_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Start with a set of chosen values (of an index) — start_with_some_values","title":"Start with a set of chosen values (of an index) — start_with_some_values","text":"Create xtibble() object values index. Higher order helper construct xtibble() object index shorter call.","code":""},{"path":"/reference/start_with_some_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start with a set of chosen values (of an index) — start_with_some_values","text":"","code":"start_with_some_values(x, period = 31L, unit = 18L, idx_name = \"idx\")"},{"path":"/reference/start_with_some_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start with a set of chosen values (of an index) — start_with_some_values","text":"x vector strings. set roles. period integer, period index() (default 31L). unit integer, unit index() (default 18L). idx_name string, column name index (default \"idx\").","code":""},{"path":"/reference/start_with_some_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start with a set of chosen values (of an index) — start_with_some_values","text":"xtibble() one column.","code":""},{"path":[]},{"path":"/reference/start_with_some_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start with a set of chosen values (of an index) — start_with_some_values","text":"","code":"# Ionian mode start_with_some_values((0:6) - 1) #> # A tibble: 7 × 1 #>          idx #>   <i<18/31>> #> 1         -1 #> 2        ~ 0 #> 3          1 #> 4          2 #> 5          3 #> 6          4 #> 7          5"},{"path":"/reference/xtibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an instance of class m_xtibble — xtibble","title":"Create an instance of class m_xtibble — xtibble","text":"creates specialized tibble (subclass tibble), index() related features.","code":""},{"path":"/reference/xtibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an instance of class m_xtibble — xtibble","text":"","code":"xtibble(x, idx_name, lock = TRUE)  is_xtibble(x)"},{"path":"/reference/xtibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an instance of class m_xtibble — xtibble","text":"x xtibble(): tibble index() column. is_xtibble(): object test. idx_name string, name column index(). lock logical, lock object prevent unexpected transformations.","code":""},{"path":"/reference/xtibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an instance of class m_xtibble — xtibble","text":"object class m_xtibble.","code":""},{"path":"/reference/xtibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an instance of class m_xtibble — xtibble","text":"","code":"tbl <- tibble::tibble(idx = index(0:2, period = 7, unit = 1), x = LETTERS[1:3]) xtibble(tbl, idx_name = \"idx\") #> # A tibble: 3 × 2 #>        idx x     #>   <i<1/7>> <chr> #> 1      ~ 0 A     #> 2        1 B     #> 3        2 C"},{"path":"/news/index.html","id":"music-0009000","dir":"Changelog","previous_headings":"","what":"music 0.0.0.9000","title":"music 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
